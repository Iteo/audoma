{
    "openapi": "3.0.3",
    "info": {
        "title": "audoma API",
        "version": "1.0.0",
        "description": "API Automatic Documentation Maker - YASG/SPECTACULAR wrapper\n\n###  Common API Errors \nStatus Code: `404` \n\n``` \n {\n    \"detail\": \"Not found.\"\n} \n ``` \n\nStatus Code: `401` \n\n``` \n {\n    \"detail\": \"Authentication credentials were not provided.\"\n} \n ``` \n\nStatus Code: `401` \n\n``` \n {\n    \"detail\": \"Incorrect authentication credentials.\"\n} \n ``` \n\nStatus Code: `400` \n\n``` \n {\n    \"detail\": \"Malformed request.\"\n} \n ``` \n\nStatus Code: `403` \n\n``` \n {\n    \"detail\": \"You do not have permission to perform this action.\"\n} \n ``` \n\nStatus Code: `406` \n\n``` \n {\n    \"available_renderers\": null,\n    \"detail\": \"Could not satisfy the request Accept header.\"\n} \n ``` \n\nStatus Code: `400` \n\n``` \n {\n    \"detail\": [\n        \"Invalid input.\"\n    ]\n} \n ``` \n\nStatus Code: `429` \n\n``` \n {\n    \"wait\": null,\n    \"detail\": \"Request was throttled.\"\n} \n ``` \n\n"
    },
    "paths": {
        "/schema/": {
            "get": {
                "operationId": "schema_retrieve",
                "description": "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "query",
                        "name": "format",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "json",
                                "yaml"
                            ]
                        }
                    },
                    {
                        "in": "query",
                        "name": "lang",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "af",
                                "ar",
                                "ast",
                                "az",
                                "be",
                                "bg",
                                "bn",
                                "br",
                                "bs",
                                "ca",
                                "cs",
                                "cy",
                                "da",
                                "de",
                                "dsb",
                                "el",
                                "en",
                                "en-au",
                                "en-gb",
                                "eo",
                                "es",
                                "es-ar",
                                "es-co",
                                "es-mx",
                                "es-ni",
                                "es-ve",
                                "et",
                                "eu",
                                "fa",
                                "fi",
                                "fr",
                                "fy",
                                "ga",
                                "gd",
                                "gl",
                                "he",
                                "hi",
                                "hr",
                                "hsb",
                                "hu",
                                "hy",
                                "ia",
                                "id",
                                "io",
                                "is",
                                "it",
                                "ja",
                                "ka",
                                "kab",
                                "kk",
                                "km",
                                "kn",
                                "ko",
                                "lb",
                                "lt",
                                "lv",
                                "mk",
                                "ml",
                                "mn",
                                "mr",
                                "my",
                                "nb",
                                "ne",
                                "nl",
                                "nn",
                                "os",
                                "pa",
                                "pl",
                                "pt",
                                "pt-br",
                                "ro",
                                "ru",
                                "sk",
                                "sl",
                                "sq",
                                "sr",
                                "sr-latn",
                                "sv",
                                "sw",
                                "ta",
                                "te",
                                "th",
                                "tr",
                                "tt",
                                "udm",
                                "uk",
                                "ur",
                                "vi",
                                "zh-hans",
                                "zh-hant"
                            ]
                        }
                    }
                ],
                "tags": [
                    "schema"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/vnd.oai.openapi": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            },
                            "application/yaml": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            },
                            "application/vnd.oai.openapi+json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            },
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/bulk_endpoint/": {
            "get": {
                "operationId": "v1_bulk_endpoint_list",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedManufacturerModelList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v1_bulk_endpoint_create",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ManufacturerModelRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ManufacturerModelRequest"
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ManufacturerModelRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ManufacturerModelRequest"
                                    }
                                ]
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ManufacturerModelRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ManufacturerModelRequest"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ManufacturerModel"
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/ManufacturerModel"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "v1_bulk_endpoint_bulk_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManufacturerModelRequest"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManufacturerModelRequest"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManufacturerModelRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManufacturerModel"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v1_bulk_endpoint_bulk_partial_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManufacturerModel"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/bulk_endpoint/{id}/": {
            "get": {
                "operationId": "v1_bulk_endpoint_retrieve",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this manufacturer.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManufacturerModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "v1_bulk_endpoint_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this manufacturer.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ManufacturerModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ManufacturerModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ManufacturerModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManufacturerModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v1_bulk_endpoint_partial_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this manufacturer.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManufacturerModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "v1_bulk_endpoint_destroy",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this manufacturer.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/v1/car_viewset/": {
            "get": {
                "operationId": "v1_car_viewset_list",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "query",
                        "name": "engine_type",
                        "schema": {
                            "type": "integer",
                            "x-choices": {
                                "choices": {
                                    "1": "Petrol",
                                    "2": "Diesel",
                                    "3": "Electric",
                                    "4": "Hybrid"
                                }
                            },
                            "enum": [
                                1,
                                2,
                                3,
                                4
                            ]
                        },
                        "description": "Filter by engine_type \n * `1` - Petrol\n * `2` - Diesel\n * `3` - Electric\n * `4` - Hybrid\n"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "Search by: \n* `manufacturer(Exact matches.)` \n* `name` \n",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedCarModelList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/car_viewset/{id}/": {
            "get": {
                "operationId": "v1_car_viewset_retrieve",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this car.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CarModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/edit_car_viewset/": {
            "post": {
                "operationId": "v1_edit_car_viewset_create",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CarDetailModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CarDetailModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CarDetailModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CarDetailModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/edit_car_viewset/{id}/": {
            "put": {
                "operationId": "v1_edit_car_viewset_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this car.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CarDetailModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/CarDetailModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CarDetailModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CarDetailModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v1_edit_car_viewset_partial_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this car.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCarDetailModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCarDetailModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedCarDetailModelRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CarDetailModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/examples/": {
            "get": {
                "operationId": "v1_examples_list",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedExampleList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v1_examples_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Example"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/examples/{id}/": {
            "get": {
                "operationId": "v1_examples_retrieve",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Example"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "v1_examples_destroy",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/v1/examples/{id}/detail_action/": {
            "post": {
                "operationId": "v1_examples_detail_action_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Example"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/examples/non_detail_action/": {
            "post": {
                "operationId": "v1_examples_non_detail_action_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Example"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/file-upload-example/": {
            "post": {
                "operationId": "v1_file_upload_example_create",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleFileModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleFileModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/manufacturer_viewset/": {
            "get": {
                "operationId": "v1_manufacturer_viewset_list",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedManufacturerModelList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v1_manufacturer_viewset_create",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ManufacturerModelRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ManufacturerModelRequest"
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ManufacturerModelRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ManufacturerModelRequest"
                                    }
                                ]
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/ManufacturerModelRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/ManufacturerModelRequest"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ManufacturerModel"
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/ManufacturerModel"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "v1_manufacturer_viewset_bulk_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManufacturerModelRequest"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManufacturerModelRequest"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ManufacturerModelRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManufacturerModel"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v1_manufacturer_viewset_bulk_partial_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ManufacturerModel"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/manufacturer_viewset/{id}/": {
            "get": {
                "operationId": "v1_manufacturer_viewset_retrieve",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this manufacturer.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManufacturerModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "v1_manufacturer_viewset_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this manufacturer.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ManufacturerModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ManufacturerModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ManufacturerModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManufacturerModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v1_manufacturer_viewset_partial_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this manufacturer.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedManufacturerModelRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ManufacturerModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "v1_manufacturer_viewset_destroy",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this manufacturer.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/v1/model_examples/": {
            "get": {
                "operationId": "v1_model_examples_list",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "parameters": [
                    {
                        "in": "query",
                        "name": "choice",
                        "schema": {
                            "type": "integer",
                            "x-choices": {
                                "choices": {
                                    "EX_1": "example 1",
                                    "EX_2": "example 2",
                                    "EX_3": "example 3"
                                }
                            },
                            "enum": [
                                "EX_1",
                                "EX_2",
                                "EX_3"
                            ]
                        },
                        "description": "Filter by choices \n * `EX_1` - example 1\n * `EX_2` - example 2\n * `EX_3` - example 3\n"
                    },
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedExampleModelList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v1_model_examples_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/model_examples/{id}/": {
            "get": {
                "operationId": "v1_model_examples_retrieve",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example model.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "v1_model_examples_destroy",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example model.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/v1/model_examples/{id}/detail_action/": {
            "get": {
                "operationId": "v1_model_examples_detail_action_retrieve",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example model.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GET method is not allowed"
                    }
                }
            }
        },
        "/v1/model_examples/non_detail_action/": {
            "post": {
                "operationId": "v1_model_examples_non_detail_action_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission` & ( `AlternatePermission1` | `AlternatePermission2`  )\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*\n+ `AlternatePermission1`: *The AlternatePermission1 is combined through OR operator with AlternatePermission2*\n+ `AlternatePermission2`: *The AlternatePermission2 is combined through OR operator with AlternatePermission1*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/model_person_example/": {
            "get": {
                "operationId": "v1_model_person_example_list",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedExamplePersonModelList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v1_model_person_example_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExamplePersonModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/model_person_example/{id}/": {
            "get": {
                "operationId": "v1_model_person_example_retrieve",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example person.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExamplePersonModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "delete": {
                "operationId": "v1_model_person_example_destroy",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example person.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/v1/model_person_example/{id}/detail_action/": {
            "post": {
                "operationId": "v1_model_person_example_detail_action_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example person.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExamplePersonModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/model_person_example/non_detail_action/": {
            "post": {
                "operationId": "v1_model_person_example_non_detail_action_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `ViewAndDetailPermission` & `DetailPermission` & `ViewPermission`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `ViewAndDetailPermission`: *The ViewAndDetailPermission guard access to all views nad detail views (collections and resources).     General view permission is determined first then if it's detail view specific object permission is checked.*\n+ `DetailPermission`: *The DetailPermission guard access to Detail Views (resources).*\n+ `ViewPermission`: *The ViewPermission guard access to all views in ViewSet (collections and resources).*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExamplePersonModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExamplePersonModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/mutually-exclusive/": {
            "get": {
                "operationId": "v1_mutually_exclusive_list",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedMutuallyExclusiveExampleList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v1_mutually_exclusive_create",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MutuallyExclusiveExampleRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/MutuallyExclusiveExampleRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/MutuallyExclusiveExampleRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MutuallyExclusiveExample"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/": {
            "post": {
                "operationId": "v1_permissionless_model_examples_create",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/{id}/detail_action/": {
            "post": {
                "operationId": "v1_permissionless_model_examples_detail_action_create",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example model.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleModel"
                                }
                            }
                        },
                        "description": ""
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleOneField"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/{id}/example_update_action/": {
            "put": {
                "operationId": "v1_permissionless_model_examples_example_update_action_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example model.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleModelCreateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v1_permissionless_model_examples_example_update_action_partial_update",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example model.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedExampleModelCreateRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedExampleModelCreateRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedExampleModelCreateRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/{id}/specific_rate/": {
            "get": {
                "operationId": "v1_permissionless_model_examples_specific_rate_retrieve",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this example model.",
                        "required": true
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleOneField"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/example_many_test_action/": {
            "get": {
                "operationId": "v1_permissionless_model_examples_example_many_test_action_list",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExamplePersonModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/improperly_defined_exception_example/": {
            "get": {
                "operationId": "v1_permissionless_model_examples_improperly_defined_exception_example_retrieve",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleOneField"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/non_detail_action/": {
            "get": {
                "operationId": "v1_permissionless_model_examples_non_detail_action_retrieve",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "description": "This is a test view"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/proper_usage_of_common_errors/": {
            "get": {
                "operationId": "v1_permissionless_model_examples_proper_usage_of_common_errors_retrieve",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleModel"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/properly_defined_exception_example/": {
            "get": {
                "operationId": "v1_permissionless_model_examples_properly_defined_exception_example_retrieve",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleOneField"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "detail": {
                                            "detail": {
                                                "type": "ErrorDetail"
                                            }
                                        }
                                    },
                                    "example": {
                                        "detail": "Custom Bad Request Exception"
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "detail": {
                                            "detail": {
                                                "type": "ErrorDetail"
                                            }
                                        }
                                    },
                                    "example": {
                                        "detail": "Conflict has occured"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/permissionless_model_examples/rate_create_action/": {
            "post": {
                "operationId": "v1_permissionless_model_examples_rate_create_action_create",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "tags": [
                    "v1"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleOneFieldRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleOneFieldRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ExampleOneFieldRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "default": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExampleOneField"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v2/doctor/": {
            "get": {
                "operationId": "v2_doctor_list",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v2"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedDoctorReadList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v2_doctor_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DoctorWriteRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DoctorWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DoctorWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoctorWrite"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v2/doctor/{id}/": {
            "put": {
                "operationId": "v2_doctor_update",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this doctor.",
                        "required": true
                    }
                ],
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DoctorWriteRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/DoctorWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/DoctorWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoctorWrite"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v2_doctor_partial_update",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this doctor.",
                        "required": true
                    }
                ],
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDoctorWriteRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDoctorWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedDoctorWriteRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DoctorWrite"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v2/patient/": {
            "get": {
                "operationId": "v2_patient_list",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v2"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedPatientReadList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v2_patient_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/PatientWriteRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/PatientWriteRequest"
                                    }
                                ]
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/PatientWriteRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/PatientWriteRequest"
                                    }
                                ]
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/PatientWriteRequest"
                                        }
                                    },
                                    {
                                        "$ref": "#/components/schemas/PatientWriteRequest"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatientRead"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "put": {
                "operationId": "v2_patient_bulk_update",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatientWriteRequest"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatientWriteRequest"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatientWriteRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PatientRead"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v2_patient_bulk_partial_update",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedPatientWriteRequest"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedPatientWriteRequest"
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PatchedPatientWriteRequest"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PatientRead"
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v2/patient/{id}/": {
            "put": {
                "operationId": "v2_patient_update",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this patient.",
                        "required": true
                    }
                ],
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatientWriteRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatientWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatientWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatientRead"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "patch": {
                "operationId": "v2_patient_partial_update",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this patient.",
                        "required": true
                    }
                ],
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPatientWriteRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPatientWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchedPatientWriteRequest"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatientRead"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v2/patient/{id}/get_files/": {
            "get": {
                "operationId": "v2_patient_get_files_retrieve",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this patient.",
                        "required": true
                    }
                ],
                "tags": [
                    "v2"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PatientFilesDetail"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v2/prescritpion/": {
            "get": {
                "operationId": "v2_prescritpion_list",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v2"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedPerscriptionReadList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            },
            "post": {
                "operationId": "v2_prescritpion_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrescrtiptionWriteRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PrescrtiptionWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PrescrtiptionWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PerscriptionRead"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v2/prescritpion/{id}/make_prescription_invalid/": {
            "post": {
                "operationId": "v2_prescritpion_make_prescription_invalid_create",
                "description": "\n\n**Permissions:**\n`IsAuthenticated` & `IsAdminUser`\n+ `IsAuthenticated`: *Allows access only to authenticated users.*\n+ `IsAdminUser`: *Allows access only to admin users.*",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "A unique integer value identifying this prescription.",
                        "required": true
                    }
                ],
                "tags": [
                    "v2"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrescrtiptionWriteRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/PrescrtiptionWriteRequest"
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/PrescrtiptionWriteRequest"
                            }
                        }
                    },
                    "required": true
                },
                "security": [
                    {
                        "tokenAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "No response body"
                    }
                }
            }
        },
        "/v2/specialization/": {
            "get": {
                "operationId": "v2_specialization_list",
                "description": "\n\n**Permissions:**\n`AllowAny`\n+ `AllowAny`: *Allow any access.     This isn't strictly required, since you could use an empty     permission_classes list, but it's useful because it makes the intention     more explicit.*",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "A page number within the paginated result set.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "tags": [
                    "v2"
                ],
                "security": [
                    {
                        "tokenAuth": []
                    },
                    {}
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaginatedSpecializationList"
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "CarDetailModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 344
                    },
                    "name": {
                        "type": "string",
                        "example": "Adipisci magnam consectetur ut etincidunt sed amet et",
                        "maxLength": 255
                    },
                    "body_type": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Sedan",
                                "2": "Coupe",
                                "3": "Hatchback",
                                "4": "Pickup Truck"
                            }
                        },
                        "description": "Filter by body_type \n * `1` - Sedan\n * `2` - Coupe\n * `3` - Hatchback\n * `4` - Pickup Truck\n"
                    },
                    "manufacturer": {
                        "type": "integer"
                    },
                    "engine_size": {
                        "type": "number",
                        "format": "float",
                        "example": 180.0134123580163
                    },
                    "engine_type": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Petrol",
                                "2": "Diesel",
                                "3": "Electric",
                                "4": "Hybrid"
                            }
                        },
                        "description": "Filter by engine_type \n * `1` - Petrol\n * `2` - Diesel\n * `3` - Electric\n * `4` - Hybrid\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CarTag"
                        }
                    },
                    "manufacturer_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Magnam quaerat dolor n"
                    }
                },
                "required": [
                    "body_type",
                    "engine_size",
                    "engine_type",
                    "id",
                    "manufacturer",
                    "manufacturer_name",
                    "name"
                ]
            },
            "CarDetailModelRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Adipisci magnam consectetur ut etincidunt sed amet et",
                        "maxLength": 255
                    },
                    "body_type": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Sedan",
                                "2": "Coupe",
                                "3": "Hatchback",
                                "4": "Pickup Truck"
                            }
                        },
                        "description": "Filter by body_type \n * `1` - Sedan\n * `2` - Coupe\n * `3` - Hatchback\n * `4` - Pickup Truck\n"
                    },
                    "manufacturer": {
                        "type": "integer"
                    },
                    "engine_size": {
                        "type": "number",
                        "format": "float",
                        "example": 461.7140841729888
                    },
                    "engine_type": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Petrol",
                                "2": "Diesel",
                                "3": "Electric",
                                "4": "Hybrid"
                            }
                        },
                        "description": "Filter by engine_type \n * `1` - Petrol\n * `2` - Diesel\n * `3` - Electric\n * `4` - Hybrid\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CarTagRequest"
                        }
                    }
                },
                "required": [
                    "body_type",
                    "engine_size",
                    "engine_type",
                    "manufacturer",
                    "name"
                ]
            },
            "CarModel": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Adipisci magnam consectetur ut etincidunt sed amet et",
                        "maxLength": 255
                    },
                    "body_type": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Sedan",
                                "2": "Coupe",
                                "3": "Hatchback",
                                "4": "Pickup Truck"
                            }
                        },
                        "description": "Filter by body_type \n * `1` - Sedan\n * `2` - Coupe\n * `3` - Hatchback\n * `4` - Pickup Truck\n"
                    },
                    "manufacturer": {
                        "type": "integer",
                        "x-choices": {
                            "operationRef": "#/paths/~1manufacturer_viewset~1",
                            "value": "$response.body#results/*/id",
                            "display": "$response.body#results/*/name"
                        },
                        "example": 188
                    },
                    "engine_size": {
                        "type": "number",
                        "format": "float",
                        "example": 180.57950426533077
                    },
                    "engine_type": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Petrol",
                                "2": "Diesel",
                                "3": "Electric",
                                "4": "Hybrid"
                            }
                        },
                        "description": "Filter by engine_type \n * `1` - Petrol\n * `2` - Diesel\n * `3` - Electric\n * `4` - Hybrid\n"
                    }
                },
                "required": [
                    "body_type",
                    "engine_size",
                    "engine_type",
                    "manufacturer",
                    "name"
                ]
            },
            "CarTag": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Non est dolorem magnam est aliqua",
                        "maxLength": 255
                    }
                },
                "required": [
                    "name"
                ]
            },
            "CarTagRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Non est dolorem magnam est aliqua",
                        "maxLength": 255
                    }
                },
                "required": [
                    "name"
                ]
            },
            "ContactData": {
                "type": "object",
                "properties": {
                    "phone_number": {
                        "type": "string",
                        "format": "tel",
                        "example": "+48 12 345 67 89",
                        "maxLength": 128
                    },
                    "mobile": {
                        "type": "string",
                        "format": "tel",
                        "example": "+48 12 345 67 89",
                        "maxLength": 128
                    },
                    "country": {
                        "enum": [
                            1,
                            2
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Poland",
                                "2": "Germany"
                            }
                        },
                        "description": "Filter by country \n * `1` - Poland\n * `2` - Germany\n",
                        "example": "Labore dolorem quisquam dolorem. "
                    },
                    "city": {
                        "type": "string",
                        "example": "Non velit dolor non dolo",
                        "maxLength": 200
                    }
                },
                "required": [
                    "city",
                    "country",
                    "mobile",
                    "phone_number"
                ]
            },
            "ContactDataRequest": {
                "type": "object",
                "properties": {
                    "phone_number": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+48 12 345 67 89",
                        "maxLength": 128
                    },
                    "mobile": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+48 12 345 67 89",
                        "maxLength": 128
                    },
                    "country": {
                        "enum": [
                            1,
                            2
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Poland",
                                "2": "Germany"
                            }
                        },
                        "description": "Filter by country \n * `1` - Poland\n * `2` - Germany\n",
                        "example": "Labore dolorem quisquam dolorem. "
                    },
                    "city": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Non velit dolor non dolo",
                        "maxLength": 200
                    }
                },
                "required": [
                    "city",
                    "country",
                    "mobile",
                    "phone_number"
                ]
            },
            "DoctorRead": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Velit ipsum porro voluptatem sit. Eius non ",
                        "maxLength": 255
                    },
                    "surname": {
                        "type": "string",
                        "example": "Labore dolore voluptatem quaerat velit porro non. Velit tempor",
                        "maxLength": 255
                    },
                    "contact_data": {
                        "$ref": "#/components/schemas/ContactData"
                    },
                    "specialization": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Specialization"
                        }
                    }
                },
                "required": [
                    "contact_data",
                    "name",
                    "specialization",
                    "surname"
                ]
            },
            "DoctorWrite": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Velit ipsum porro voluptatem sit. Eius non ",
                        "maxLength": 255
                    },
                    "surname": {
                        "type": "string",
                        "example": "Labore dolore voluptatem quaerat velit porro non. Velit tempor",
                        "maxLength": 255
                    },
                    "contact_data": {
                        "$ref": "#/components/schemas/ContactData"
                    },
                    "specialization": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 272
                        },
                        "x-choices": {
                            "operationRef": "#/paths/~1specialization~1",
                            "value": "$response.body#results/*/id",
                            "display": "$response.body#results/*/name"
                        }
                    },
                    "salary": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "699.73"
                    }
                },
                "required": [
                    "contact_data",
                    "name",
                    "salary",
                    "specialization",
                    "surname"
                ]
            },
            "DoctorWriteRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Velit ipsum porro voluptatem sit. Eius non ",
                        "maxLength": 255
                    },
                    "surname": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Labore dolore voluptatem quaerat velit porro non. Velit tempor",
                        "maxLength": 255
                    },
                    "contact_data": {
                        "$ref": "#/components/schemas/ContactDataRequest"
                    },
                    "specialization": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 774
                        },
                        "x-choices": {
                            "operationRef": "#/paths/~1specialization~1",
                            "value": "$response.body#results/*/id",
                            "display": "$response.body#results/*/name"
                        }
                    },
                    "salary": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "17.95"
                    }
                },
                "required": [
                    "contact_data",
                    "name",
                    "salary",
                    "specialization",
                    "surname"
                ]
            },
            "Example": {
                "type": "object",
                "properties": {
                    "charfield_nolimits": {
                        "type": "string",
                        "example": "Eius porro etincidunt eius tempora dolor sit dolorem. Quaerat ipsum se"
                    },
                    "charfield_min_max": {
                        "type": "string",
                        "example": "Est amet labore est.",
                        "maxLength": 20,
                        "minLength": 10
                    },
                    "phone_number": {
                        "type": "string",
                        "format": "tel",
                        "example": "+247 62889"
                    },
                    "phone_number_example": {
                        "type": "string",
                        "format": "tel",
                        "example": "+48 123 456 789"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri"
                    },
                    "boolean": {
                        "type": "boolean"
                    },
                    "nullboolean": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "mac_address": {
                        "type": "string",
                        "example": "7F-78-A1-CA-86-36",
                        "pattern": "^([0-9A-F]{2}:){5}([0-9A-F]{2})|([0-9A-F]{2}-){5}([0-9A-F]{2})$"
                    },
                    "regex_mac_address": {
                        "type": "string",
                        "example": "5B:78:C8:D8:09:52",
                        "pattern": "^([0-9A-F]{2}:){5}([0-9A-F]{2})|([0-9A-F]{2}-){5}([0-9A-F]{2})$"
                    },
                    "slug": {
                        "type": "string",
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ip_address": {
                        "type": "string",
                        "format": "ip-address",
                        "example": "255.253.248.248"
                    },
                    "integer": {
                        "type": "integer",
                        "maximum": 30,
                        "minimum": 25,
                        "example": 25
                    },
                    "float": {
                        "type": "number",
                        "format": "float",
                        "maximum": 4.0,
                        "minimum": 1.0,
                        "example": 3.6216780537588704
                    },
                    "decimal": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "24.92"
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-12-03T06:23:56.601557Z"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2022-12-14"
                    },
                    "time": {
                        "type": "string",
                        "format": "time",
                        "example": "12:34:56.000000"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "money": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "89.90"
                    },
                    "choice": {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "One",
                                "2": "Two",
                                "3": "Three"
                            }
                        },
                        "description": "Filter by choice \n * `1` - One\n * `2` - Two\n * `3` - Three\n"
                    },
                    "list_of_emails": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "email"
                        }
                    },
                    "dict_of_addressess": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "email"
                        }
                    },
                    "hstore_of_emails": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "email"
                        }
                    },
                    "json": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "readonly": {
                        "type": "string",
                        "readOnly": true
                    },
                    "nested": {
                        "$ref": "#/components/schemas/NestedExample"
                    }
                },
                "required": [
                    "boolean",
                    "charfield_min_max",
                    "charfield_nolimits",
                    "choice",
                    "date",
                    "datetime",
                    "decimal",
                    "dict_of_addressess",
                    "duration",
                    "email",
                    "float",
                    "hstore_of_emails",
                    "integer",
                    "ip_address",
                    "json",
                    "list_of_emails",
                    "mac_address",
                    "money",
                    "nested",
                    "nullboolean",
                    "phone_number",
                    "phone_number_example",
                    "readonly",
                    "regex_mac_address",
                    "slug",
                    "time",
                    "url",
                    "uuid"
                ]
            },
            "ExampleFileModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 861
                    },
                    "file_field": {
                        "type": "string",
                        "format": "uri"
                    },
                    "name": {
                        "type": "string",
                        "example": "Sed amet quisquam porro ut porro modi m",
                        "maxLength": 255
                    }
                },
                "required": [
                    "file_field",
                    "id",
                    "name"
                ]
            },
            "ExampleFileModelRequest": {
                "type": "object",
                "properties": {
                    "file_field": {
                        "type": "string",
                        "format": "binary"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Sed amet quisquam porro ut porro modi m",
                        "maxLength": 255
                    }
                },
                "required": [
                    "file_field",
                    "name"
                ]
            },
            "ExampleModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 36
                    },
                    "phone_number": {
                        "type": "string",
                        "format": "tel",
                        "example": "+247 62889"
                    },
                    "char_field": {
                        "type": "string",
                        "example": "lorem ipsum",
                        "maxLength": 255
                    },
                    "phone_number_example": {
                        "type": "string",
                        "format": "tel",
                        "example": "+123456789",
                        "maxLength": 128
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 254
                    },
                    "text_field": {
                        "type": "string",
                        "example": "Sit aliquam quisquam quiquia quiquia sed magnam"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "maxLength": 200
                    },
                    "boolean": {
                        "type": "boolean"
                    },
                    "nullboolean": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "mac_adress": {
                        "type": "string",
                        "example": "C4:51:67:AC:77:CA",
                        "pattern": "^([0-9A-F]{2}:){5}([0-9A-F]{2})|([0-9A-F]{2}-){5}([0-9A-F]{2})$"
                    },
                    "slug": {
                        "type": "string",
                        "maxLength": 50,
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ip_address": {
                        "type": "string",
                        "format": "ip-address",
                        "example": "255.253.248.248"
                    },
                    "integer": {
                        "type": "integer",
                        "example": 406
                    },
                    "_float": {
                        "type": "number",
                        "format": "float",
                        "title": " float",
                        "example": 847.0865982829511
                    },
                    "decimal": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "841.63"
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-11-24T08:46:56.618049Z"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2022-12-04"
                    },
                    "time": {
                        "type": "string",
                        "format": "time",
                        "example": "14:11:56.618201"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "choices": {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "example 1",
                                "2": "example 2",
                                "3": "example 3"
                            }
                        },
                        "description": "Filter by choices \n * `1` - example 1\n * `2` - example 2\n * `3` - example 3\n"
                    },
                    "json": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "money_currency": {
                        "enum": [
                            "AUD",
                            "GBP",
                            "CNY",
                            "EUR",
                            "INR",
                            "JPY",
                            "NZD",
                            "CHF",
                            "USD"
                        ],
                        "type": "string",
                        "x-choices": {
                            "choices": {
                                "AUD": "Australian Dollar",
                                "GBP": "British Pound",
                                "CNY": "Chinese Yuan",
                                "EUR": "Euro",
                                "INR": "Indian Rupee",
                                "JPY": "Japanese Yen",
                                "NZD": "New Zealand Dollar",
                                "CHF": "Swiss Franc",
                                "USD": "US Dollar"
                            }
                        },
                        "description": "Filter by money_currency \n * `AUD` - Australian Dollar\n * `GBP` - British Pound\n * `CNY` - Chinese Yuan\n * `EUR` - Euro\n * `INR` - Indian Rupee\n * `JPY` - Japanese Yen\n * `NZD` - New Zealand Dollar\n * `CHF` - Swiss Franc\n * `USD` - US Dollar\n",
                        "example": "USD"
                    },
                    "money": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "55.30"
                    }
                },
                "required": [
                    "_float",
                    "boolean",
                    "char_field",
                    "choices",
                    "date",
                    "datetime",
                    "decimal",
                    "duration",
                    "email",
                    "id",
                    "integer",
                    "ip_address",
                    "mac_adress",
                    "money",
                    "phone_number",
                    "phone_number_example",
                    "slug",
                    "text_field",
                    "time",
                    "url",
                    "uuid"
                ]
            },
            "ExampleModelCreateRequest": {
                "type": "object",
                "properties": {
                    "char_field": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Tempora quaerat neque quisquam tempora quiquia. Dolore numquam voluptat",
                        "maxLength": 255
                    },
                    "phone_number": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+247 62889",
                        "maxLength": 128
                    },
                    "phone_number_example": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+123456789",
                        "maxLength": 128
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1,
                        "maxLength": 254
                    },
                    "text_field": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Sit aliquam quisquam quiquia quiquia sed magnam"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "boolean": {
                        "type": "boolean"
                    },
                    "nullboolean": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "mac_adress": {
                        "type": "string",
                        "minLength": 1,
                        "example": "1A:40:49:00:0E:A2",
                        "pattern": "^([0-9A-F]{2}:){5}([0-9A-F]{2})|([0-9A-F]{2}-){5}([0-9A-F]{2})$"
                    },
                    "slug": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50,
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ip_address": {
                        "type": "string",
                        "minLength": 1,
                        "format": "ip-address",
                        "example": "255.253.248.248"
                    },
                    "integer": {
                        "type": "integer",
                        "example": 207
                    },
                    "_float": {
                        "type": "number",
                        "format": "float",
                        "title": " float",
                        "example": 367.06805488121597
                    },
                    "decimal": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "137.77"
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-11-26T12:03:56.645201Z"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2022-11-30"
                    },
                    "time": {
                        "type": "string",
                        "format": "time",
                        "example": "11:07:56.645397"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "choices": {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "example 1",
                                "2": "example 2",
                                "3": "example 3"
                            }
                        },
                        "description": "Filter by choices \n * `1` - example 1\n * `2` - example 2\n * `3` - example 3\n"
                    },
                    "json": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "money_currency": {
                        "enum": [
                            "AUD",
                            "GBP",
                            "CNY",
                            "EUR",
                            "INR",
                            "JPY",
                            "NZD",
                            "CHF",
                            "USD"
                        ],
                        "type": "string",
                        "x-choices": {
                            "choices": {
                                "AUD": "Australian Dollar",
                                "GBP": "British Pound",
                                "CNY": "Chinese Yuan",
                                "EUR": "Euro",
                                "INR": "Indian Rupee",
                                "JPY": "Japanese Yen",
                                "NZD": "New Zealand Dollar",
                                "CHF": "Swiss Franc",
                                "USD": "US Dollar"
                            }
                        },
                        "description": "Filter by money_currency \n * `AUD` - Australian Dollar\n * `GBP` - British Pound\n * `CNY` - Chinese Yuan\n * `EUR` - Euro\n * `INR` - Indian Rupee\n * `JPY` - Japanese Yen\n * `NZD` - New Zealand Dollar\n * `CHF` - Swiss Franc\n * `USD` - US Dollar\n",
                        "example": "USD"
                    },
                    "money": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "935.87"
                    }
                },
                "required": [
                    "_float",
                    "boolean",
                    "char_field",
                    "choices",
                    "date",
                    "datetime",
                    "decimal",
                    "duration",
                    "email",
                    "integer",
                    "ip_address",
                    "mac_adress",
                    "money",
                    "phone_number",
                    "phone_number_example",
                    "slug",
                    "text_field",
                    "time",
                    "url",
                    "uuid"
                ]
            },
            "ExampleModelRequest": {
                "type": "object",
                "properties": {
                    "phone_number": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+247 62889"
                    },
                    "char_field": {
                        "type": "string",
                        "minLength": 1,
                        "example": "lorem ipsum",
                        "maxLength": 255
                    },
                    "phone_number_example": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+123456789",
                        "maxLength": 128
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1,
                        "maxLength": 254
                    },
                    "text_field": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Sit aliquam quisquam quiquia quiquia sed magnam"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "boolean": {
                        "type": "boolean"
                    },
                    "nullboolean": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "mac_adress": {
                        "type": "string",
                        "minLength": 1,
                        "example": "57:E8:19:B4:04:8E",
                        "pattern": "^([0-9A-F]{2}:){5}([0-9A-F]{2})|([0-9A-F]{2}-){5}([0-9A-F]{2})$"
                    },
                    "slug": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50,
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ip_address": {
                        "type": "string",
                        "minLength": 1,
                        "format": "ip-address",
                        "example": "255.253.248.248"
                    },
                    "integer": {
                        "type": "integer",
                        "example": 983
                    },
                    "_float": {
                        "type": "number",
                        "format": "float",
                        "title": " float",
                        "example": 155.4126018804384
                    },
                    "decimal": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "16.13"
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-12-07T07:09:56.622093Z"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2022-12-09"
                    },
                    "time": {
                        "type": "string",
                        "format": "time",
                        "example": "12:06:56.622243"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "choices": {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "example 1",
                                "2": "example 2",
                                "3": "example 3"
                            }
                        },
                        "description": "Filter by choices \n * `1` - example 1\n * `2` - example 2\n * `3` - example 3\n"
                    },
                    "json": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "money_currency": {
                        "enum": [
                            "AUD",
                            "GBP",
                            "CNY",
                            "EUR",
                            "INR",
                            "JPY",
                            "NZD",
                            "CHF",
                            "USD"
                        ],
                        "type": "string",
                        "x-choices": {
                            "choices": {
                                "AUD": "Australian Dollar",
                                "GBP": "British Pound",
                                "CNY": "Chinese Yuan",
                                "EUR": "Euro",
                                "INR": "Indian Rupee",
                                "JPY": "Japanese Yen",
                                "NZD": "New Zealand Dollar",
                                "CHF": "Swiss Franc",
                                "USD": "US Dollar"
                            }
                        },
                        "description": "Filter by money_currency \n * `AUD` - Australian Dollar\n * `GBP` - British Pound\n * `CNY` - Chinese Yuan\n * `EUR` - Euro\n * `INR` - Indian Rupee\n * `JPY` - Japanese Yen\n * `NZD` - New Zealand Dollar\n * `CHF` - Swiss Franc\n * `USD` - US Dollar\n",
                        "example": "USD"
                    },
                    "money": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "563.15"
                    }
                },
                "required": [
                    "_float",
                    "boolean",
                    "char_field",
                    "choices",
                    "date",
                    "datetime",
                    "decimal",
                    "duration",
                    "email",
                    "integer",
                    "ip_address",
                    "mac_adress",
                    "money",
                    "phone_number",
                    "phone_number_example",
                    "slug",
                    "text_field",
                    "time",
                    "url",
                    "uuid"
                ]
            },
            "ExampleOneField": {
                "type": "object",
                "properties": {
                    "rate": {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "0": "Like",
                                "1": "Dislike"
                            }
                        },
                        "description": "Filter by rate \n * `0` - Like\n * `1` - Dislike\n"
                    }
                },
                "required": [
                    "rate"
                ]
            },
            "ExampleOneFieldRequest": {
                "type": "object",
                "properties": {
                    "rate": {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "0": "Like",
                                "1": "Dislike"
                            }
                        },
                        "description": "Filter by rate \n * `0` - Like\n * `1` - Dislike\n"
                    }
                },
                "required": [
                    "rate"
                ]
            },
            "ExamplePersonModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 857
                    },
                    "first_name": {
                        "type": "string",
                        "example": "Adam",
                        "maxLength": 225
                    },
                    "last_name": {
                        "type": "string",
                        "example": "Smith",
                        "maxLength": 255
                    },
                    "age": {
                        "type": "integer",
                        "example": 35
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "example_person@example.com",
                        "maxLength": 254
                    },
                    "residence_city": {
                        "type": "string",
                        "example": "Rome",
                        "maxLength": 255
                    },
                    "has_valid_account": {
                        "type": "boolean"
                    },
                    "ip_address": {
                        "type": "string",
                        "format": "ip-address",
                        "example": "255.253.248.248"
                    },
                    "savings_currency": {
                        "enum": [
                            "AUD",
                            "GBP",
                            "CNY",
                            "EUR",
                            "INR",
                            "JPY",
                            "NZD",
                            "CHF",
                            "USD"
                        ],
                        "type": "string",
                        "x-choices": {
                            "choices": {
                                "AUD": "Australian Dollar",
                                "GBP": "British Pound",
                                "CNY": "Chinese Yuan",
                                "EUR": "Euro",
                                "INR": "Indian Rupee",
                                "JPY": "Japanese Yen",
                                "NZD": "New Zealand Dollar",
                                "CHF": "Swiss Franc",
                                "USD": "US Dollar"
                            }
                        },
                        "description": "Filter by savings_currency \n * `AUD` - Australian Dollar\n * `GBP` - British Pound\n * `CNY` - Chinese Yuan\n * `EUR` - Euro\n * `INR` - Indian Rupee\n * `JPY` - Japanese Yen\n * `NZD` - New Zealand Dollar\n * `CHF` - Swiss Franc\n * `USD` - US Dollar\n",
                        "example": "PLN"
                    },
                    "savings": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,12}(?:\\.\\d{0,2})?$",
                        "example": "39.88"
                    },
                    "phone_number": {
                        "type": "string",
                        "format": "tel",
                        "example": "+39 02 1234 5678",
                        "maxLength": 128
                    },
                    "birth_country": {
                        "type": "integer"
                    }
                },
                "required": [
                    "age",
                    "birth_country",
                    "email",
                    "has_valid_account",
                    "id",
                    "ip_address",
                    "last_name",
                    "phone_number",
                    "residence_city",
                    "savings"
                ]
            },
            "ExamplePersonModelRequest": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Adam",
                        "maxLength": 225
                    },
                    "last_name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Smith",
                        "maxLength": 255
                    },
                    "age": {
                        "type": "integer",
                        "example": 27
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1,
                        "example": "example_person@example.com",
                        "maxLength": 254
                    },
                    "residence_city": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Athens",
                        "maxLength": 255
                    },
                    "has_valid_account": {
                        "type": "boolean"
                    },
                    "ip_address": {
                        "type": "string",
                        "minLength": 1,
                        "format": "ip-address",
                        "example": "255.253.248.248"
                    },
                    "savings_currency": {
                        "enum": [
                            "AUD",
                            "GBP",
                            "CNY",
                            "EUR",
                            "INR",
                            "JPY",
                            "NZD",
                            "CHF",
                            "USD"
                        ],
                        "type": "string",
                        "x-choices": {
                            "choices": {
                                "AUD": "Australian Dollar",
                                "GBP": "British Pound",
                                "CNY": "Chinese Yuan",
                                "EUR": "Euro",
                                "INR": "Indian Rupee",
                                "JPY": "Japanese Yen",
                                "NZD": "New Zealand Dollar",
                                "CHF": "Swiss Franc",
                                "USD": "US Dollar"
                            }
                        },
                        "description": "Filter by savings_currency \n * `AUD` - Australian Dollar\n * `GBP` - British Pound\n * `CNY` - Chinese Yuan\n * `EUR` - Euro\n * `INR` - Indian Rupee\n * `JPY` - Japanese Yen\n * `NZD` - New Zealand Dollar\n * `CHF` - Swiss Franc\n * `USD` - US Dollar\n",
                        "example": "PLN"
                    },
                    "savings": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,12}(?:\\.\\d{0,2})?$",
                        "example": "945.02"
                    },
                    "phone_number": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+39 02 1234 5678",
                        "maxLength": 128
                    },
                    "birth_country": {
                        "type": "integer"
                    }
                },
                "required": [
                    "age",
                    "birth_country",
                    "email",
                    "has_valid_account",
                    "ip_address",
                    "last_name",
                    "phone_number",
                    "residence_city",
                    "savings"
                ]
            },
            "ExampleRequest": {
                "type": "object",
                "properties": {
                    "charfield_nolimits": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Tempora amet voluptatem adipisci ipsum magnam porro. Etincidu"
                    },
                    "charfield_min_max": {
                        "type": "string",
                        "minLength": 10,
                        "example": "Voluptatem magnam do",
                        "maxLength": 20
                    },
                    "phone_number": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+247 62889"
                    },
                    "phone_number_example": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+48 123 456 789"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "minLength": 1
                    },
                    "boolean": {
                        "type": "boolean"
                    },
                    "nullboolean": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "mac_address": {
                        "type": "string",
                        "minLength": 1,
                        "example": "77:55:D4:DD:8C:0B",
                        "pattern": "^([0-9A-F]{2}:){5}([0-9A-F]{2})|([0-9A-F]{2}-){5}([0-9A-F]{2})$"
                    },
                    "regex_mac_address": {
                        "type": "string",
                        "minLength": 1,
                        "example": "49:80:B8:5C:76:01",
                        "pattern": "^([0-9A-F]{2}:){5}([0-9A-F]{2})|([0-9A-F]{2}-){5}([0-9A-F]{2})$"
                    },
                    "slug": {
                        "type": "string",
                        "minLength": 1,
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ip_address": {
                        "type": "string",
                        "minLength": 1,
                        "format": "ip-address",
                        "example": "255.253.248.248"
                    },
                    "integer": {
                        "type": "integer",
                        "maximum": 30,
                        "minimum": 25,
                        "example": 29
                    },
                    "float": {
                        "type": "number",
                        "format": "float",
                        "maximum": 4.0,
                        "minimum": 1.0,
                        "example": 1.8667820568633853
                    },
                    "decimal": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "101.52"
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-12-05T13:08:56.604801Z"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2022-12-14"
                    },
                    "time": {
                        "type": "string",
                        "format": "time",
                        "example": "12:34:56.000000"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "money": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "625.98"
                    },
                    "choice": {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "One",
                                "2": "Two",
                                "3": "Three"
                            }
                        },
                        "description": "Filter by choice \n * `1` - One\n * `2` - Two\n * `3` - Three\n"
                    },
                    "list_of_emails": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "email",
                            "minLength": 1
                        }
                    },
                    "dict_of_addressess": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "email",
                            "minLength": 1
                        }
                    },
                    "hstore_of_emails": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "email",
                            "minLength": 1
                        }
                    },
                    "json": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "nested": {
                        "$ref": "#/components/schemas/NestedExampleRequest"
                    }
                },
                "required": [
                    "boolean",
                    "charfield_min_max",
                    "charfield_nolimits",
                    "choice",
                    "date",
                    "datetime",
                    "decimal",
                    "dict_of_addressess",
                    "duration",
                    "email",
                    "float",
                    "hstore_of_emails",
                    "integer",
                    "ip_address",
                    "json",
                    "list_of_emails",
                    "mac_address",
                    "money",
                    "nested",
                    "nullboolean",
                    "phone_number",
                    "phone_number_example",
                    "regex_mac_address",
                    "slug",
                    "time",
                    "url",
                    "uuid"
                ]
            },
            "ManufacturerModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 557
                    },
                    "name": {
                        "type": "string",
                        "example": "Etincidunt quaerat labore ut. Neque labore",
                        "maxLength": 255
                    },
                    "slug_name": {
                        "type": "string",
                        "maxLength": 50,
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "slug_name"
                ]
            },
            "ManufacturerModelRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Etincidunt quaerat labore ut. Neque labore",
                        "maxLength": 255
                    },
                    "slug_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50,
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    }
                },
                "required": [
                    "name",
                    "slug_name"
                ]
            },
            "MutuallyExclusiveExample": {
                "type": "object",
                "properties": {
                    "example_field": {
                        "type": "string",
                        "example": "Labore sit porro quaerat sed sit numquam."
                    },
                    "second_example_field": {
                        "type": "string",
                        "example": "Aliquam velit dolorem sed quaerat magnam. Dolor est eius ipsum amet consect"
                    },
                    "third_example_field": {
                        "type": "string",
                        "example": "Numquam velit ipsum etincidunt ips"
                    },
                    "fourth_example_field": {
                        "type": "string",
                        "example": "Non est numquam velit neque numquam. Porro amet dolor dolor"
                    },
                    "not_exclusive_field": {
                        "type": "string",
                        "example": "Quaerat aliquam sed dolor. Eius velit labore etincidunt quisquam adipisc"
                    },
                    "second_not_exclusive_field": {
                        "type": "string",
                        "example": "Ut porro sed numquam sed quisquam quiquia eius. Neque aliquam"
                    }
                }
            },
            "MutuallyExclusiveExampleRequest": {
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "second_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Ipsum aliquam neque tempora eius porro voluptatem. Modi labore eius neque volu"
                            },
                            "third_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Magnam porro consectetur quis"
                            },
                            "fourth_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Numquam eius quisquam ipsum numquam. Modi aliquam adipisci magnam ipsu"
                            },
                            "not_exclusive_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Est labore sed sed non dolor."
                            },
                            "second_not_exclusive_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Quisquam ipsum numquam aliquam sed voluptatem etincidunt."
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Dolore ut velit eius sit. Dolore consectetur quisquam dolor ne"
                            },
                            "third_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Magnam porro consectetur quis"
                            },
                            "fourth_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Numquam eius quisquam ipsum numquam. Modi aliquam adipisci magnam ipsu"
                            },
                            "not_exclusive_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Est labore sed sed non dolor."
                            },
                            "second_not_exclusive_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Quisquam ipsum numquam aliquam sed voluptatem etincidunt."
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Dolore ut velit eius sit. Dolore consectetur quisquam dolor ne"
                            },
                            "second_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Ipsum aliquam neque tempora eius porro voluptatem. Modi labore eius neque volu"
                            },
                            "fourth_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Numquam eius quisquam ipsum numquam. Modi aliquam adipisci magnam ipsu"
                            },
                            "not_exclusive_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Est labore sed sed non dolor."
                            },
                            "second_not_exclusive_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Quisquam ipsum numquam aliquam sed voluptatem etincidunt."
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Dolore ut velit eius sit. Dolore consectetur quisquam dolor ne"
                            },
                            "second_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Ipsum aliquam neque tempora eius porro voluptatem. Modi labore eius neque volu"
                            },
                            "third_example_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Magnam porro consectetur quis"
                            },
                            "not_exclusive_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Est labore sed sed non dolor."
                            },
                            "second_not_exclusive_field": {
                                "type": "string",
                                "minLength": 1,
                                "example": "Quisquam ipsum numquam aliquam sed voluptatem etincidunt."
                            }
                        }
                    }
                ]
            },
            "NestedExample": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "required": [
                    "email"
                ]
            },
            "NestedExampleRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1
                    }
                },
                "required": [
                    "email"
                ]
            },
            "PaginatedCarModelList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 88
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CarModel"
                        }
                    }
                }
            },
            "PaginatedDoctorReadList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 82
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DoctorRead"
                        }
                    }
                }
            },
            "PaginatedExampleList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 89
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Example"
                        }
                    }
                }
            },
            "PaginatedExampleModelList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 91
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExampleModel"
                        }
                    }
                }
            },
            "PaginatedExamplePersonModelList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 26
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExamplePersonModel"
                        }
                    }
                }
            },
            "PaginatedManufacturerModelList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 64
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ManufacturerModel"
                        }
                    }
                }
            },
            "PaginatedMutuallyExclusiveExampleList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 86
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MutuallyExclusiveExample"
                        }
                    }
                }
            },
            "PaginatedPatientReadList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 52
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PatientRead"
                        }
                    }
                }
            },
            "PaginatedPerscriptionReadList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 41
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PerscriptionRead"
                        }
                    }
                }
            },
            "PaginatedSpecializationList": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "example": 44
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=4"
                    },
                    "previous": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://api.example.org/accounts/?page=2"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Specialization"
                        }
                    }
                }
            },
            "PatchedCarDetailModelRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Adipisci magnam consectetur ut etincidunt sed amet et",
                        "maxLength": 255
                    },
                    "body_type": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Sedan",
                                "2": "Coupe",
                                "3": "Hatchback",
                                "4": "Pickup Truck"
                            }
                        },
                        "description": "Filter by body_type \n * `1` - Sedan\n * `2` - Coupe\n * `3` - Hatchback\n * `4` - Pickup Truck\n"
                    },
                    "manufacturer": {
                        "type": "integer"
                    },
                    "engine_size": {
                        "type": "number",
                        "format": "float",
                        "example": 716.603367112816
                    },
                    "engine_type": {
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "Petrol",
                                "2": "Diesel",
                                "3": "Electric",
                                "4": "Hybrid"
                            }
                        },
                        "description": "Filter by engine_type \n * `1` - Petrol\n * `2` - Diesel\n * `3` - Electric\n * `4` - Hybrid\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CarTagRequest"
                        }
                    }
                }
            },
            "PatchedDoctorWriteRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Velit ipsum porro voluptatem sit. Eius non ",
                        "maxLength": 255
                    },
                    "surname": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Labore dolore voluptatem quaerat velit porro non. Velit tempor",
                        "maxLength": 255
                    },
                    "contact_data": {
                        "$ref": "#/components/schemas/ContactDataRequest"
                    },
                    "specialization": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 173
                        },
                        "x-choices": {
                            "operationRef": "#/paths/~1specialization~1",
                            "value": "$response.body#results/*/id",
                            "display": "$response.body#results/*/name"
                        }
                    },
                    "salary": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "830.98"
                    }
                }
            },
            "PatchedExampleModelCreateRequest": {
                "type": "object",
                "properties": {
                    "char_field": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Tempora quaerat neque quisquam tempora quiquia. Dolore numquam voluptat",
                        "maxLength": 255
                    },
                    "phone_number": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+247 62889",
                        "maxLength": 128
                    },
                    "phone_number_example": {
                        "type": "string",
                        "minLength": 1,
                        "format": "tel",
                        "example": "+123456789",
                        "maxLength": 128
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "minLength": 1,
                        "maxLength": 254
                    },
                    "text_field": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Sit aliquam quisquam quiquia quiquia sed magnam"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "minLength": 1,
                        "maxLength": 200
                    },
                    "boolean": {
                        "type": "boolean"
                    },
                    "nullboolean": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "mac_adress": {
                        "type": "string",
                        "minLength": 1,
                        "example": "43:9C:F6:0C:AA:4F",
                        "pattern": "^([0-9A-F]{2}:){5}([0-9A-F]{2})|([0-9A-F]{2}-){5}([0-9A-F]{2})$"
                    },
                    "slug": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50,
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    },
                    "uuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "ip_address": {
                        "type": "string",
                        "minLength": 1,
                        "format": "ip-address",
                        "example": "255.253.248.248"
                    },
                    "integer": {
                        "type": "integer",
                        "example": 834
                    },
                    "_float": {
                        "type": "number",
                        "format": "float",
                        "title": " float",
                        "example": 442.4524029666758
                    },
                    "decimal": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "189.92"
                    },
                    "datetime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-12-07T05:52:56.651630Z"
                    },
                    "date": {
                        "type": "string",
                        "format": "date",
                        "example": "2022-12-14"
                    },
                    "time": {
                        "type": "string",
                        "format": "time",
                        "example": "11:10:56.651794"
                    },
                    "duration": {
                        "type": "string"
                    },
                    "choices": {
                        "enum": [
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-choices": {
                            "choices": {
                                "1": "example 1",
                                "2": "example 2",
                                "3": "example 3"
                            }
                        },
                        "description": "Filter by choices \n * `1` - example 1\n * `2` - example 2\n * `3` - example 3\n"
                    },
                    "json": {
                        "type": "object",
                        "additionalProperties": {}
                    },
                    "money_currency": {
                        "enum": [
                            "AUD",
                            "GBP",
                            "CNY",
                            "EUR",
                            "INR",
                            "JPY",
                            "NZD",
                            "CHF",
                            "USD"
                        ],
                        "type": "string",
                        "x-choices": {
                            "choices": {
                                "AUD": "Australian Dollar",
                                "GBP": "British Pound",
                                "CNY": "Chinese Yuan",
                                "EUR": "Euro",
                                "INR": "Indian Rupee",
                                "JPY": "Japanese Yen",
                                "NZD": "New Zealand Dollar",
                                "CHF": "Swiss Franc",
                                "USD": "US Dollar"
                            }
                        },
                        "description": "Filter by money_currency \n * `AUD` - Australian Dollar\n * `GBP` - British Pound\n * `CNY` - Chinese Yuan\n * `EUR` - Euro\n * `INR` - Indian Rupee\n * `JPY` - Japanese Yen\n * `NZD` - New Zealand Dollar\n * `CHF` - Swiss Franc\n * `USD` - US Dollar\n",
                        "example": "USD"
                    },
                    "money": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,8}(?:\\.\\d{0,2})?$",
                        "example": "77.33"
                    }
                }
            },
            "PatchedManufacturerModelRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Etincidunt quaerat labore ut. Neque labore",
                        "maxLength": 255
                    },
                    "slug_name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 50,
                        "pattern": "^[-a-zA-Z0-9_]+$"
                    }
                }
            },
            "PatchedPatientWriteRequest": {
                "type": "object",
                "properties": {
                    "pk": {
                        "type": "integer",
                        "writeOnly": true,
                        "example": 808
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Velit ipsum porro voluptatem sit. Eius non ",
                        "maxLength": 255
                    },
                    "surname": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Labore dolore voluptatem quaerat velit porro non. Velit tempor",
                        "maxLength": 255
                    },
                    "contact_data": {
                        "$ref": "#/components/schemas/ContactDataRequest"
                    },
                    "weight": {
                        "type": "number",
                        "format": "float",
                        "example": 522.0142837893626
                    },
                    "height": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,4}(?:\\.\\d{0,2})?$",
                        "example": "880.36"
                    }
                }
            },
            "PatientFilesDetail": {
                "type": "object",
                "properties": {
                    "patient": {
                        "$ref": "#/components/schemas/PatientRead"
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PatientFilesEntry"
                        }
                    }
                },
                "required": [
                    "entries",
                    "patient"
                ]
            },
            "PatientFilesEntry": {
                "type": "object",
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2022-12-06T06:24:56.687606Z"
                    },
                    "modifed_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2022-12-14T14:00:56.687739Z"
                    },
                    "title": {
                        "type": "string",
                        "example": "Eius porro amet amet tempora ",
                        "maxLength": 200
                    },
                    "content": {
                        "type": "string",
                        "example": "Ut non porro aliquam te"
                    }
                },
                "required": [
                    "content",
                    "created_at",
                    "modifed_at",
                    "title"
                ]
            },
            "PatientRead": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Velit ipsum porro voluptatem sit. Eius non ",
                        "maxLength": 255
                    },
                    "surname": {
                        "type": "string",
                        "example": "Labore dolore voluptatem quaerat velit porro non. Velit tempor",
                        "maxLength": 255
                    },
                    "contact_data": {
                        "$ref": "#/components/schemas/ContactData"
                    },
                    "weight": {
                        "type": "number",
                        "format": "float",
                        "example": 425.49598712763384
                    },
                    "height": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,4}(?:\\.\\d{0,2})?$",
                        "example": "785.04"
                    }
                },
                "required": [
                    "contact_data",
                    "height",
                    "name",
                    "surname",
                    "weight"
                ]
            },
            "PatientWriteRequest": {
                "type": "object",
                "properties": {
                    "pk": {
                        "type": "integer",
                        "writeOnly": true,
                        "example": 33
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Velit ipsum porro voluptatem sit. Eius non ",
                        "maxLength": 255
                    },
                    "surname": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Labore dolore voluptatem quaerat velit porro non. Velit tempor",
                        "maxLength": 255
                    },
                    "contact_data": {
                        "$ref": "#/components/schemas/ContactDataRequest"
                    },
                    "weight": {
                        "type": "number",
                        "format": "float",
                        "example": 188.43868102541424
                    },
                    "height": {
                        "type": "string",
                        "format": "decimal",
                        "pattern": "^\\d{0,4}(?:\\.\\d{0,2})?$",
                        "example": "831.61"
                    }
                },
                "required": [
                    "contact_data",
                    "height",
                    "name",
                    "surname",
                    "weight"
                ]
            },
            "PerscriptionRead": {
                "type": "object",
                "properties": {
                    "issued_by": {
                        "type": "integer"
                    },
                    "issued_for": {
                        "type": "integer"
                    },
                    "drugs": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {}
                        }
                    },
                    "usable_in": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "date",
                            "example": "2022-11-29"
                        },
                        "example": {
                            "lower": "2022-12-11",
                            "upper": "2022-12-12",
                            "bounds": null
                        }
                    },
                    "issued_in": {
                        "type": "string",
                        "example": "Sed tempora amet non. Non quiquia sit dolorem. Dolore aliq",
                        "maxLength": 255
                    },
                    "is_valid": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "drugs",
                    "issued_by",
                    "issued_for",
                    "issued_in",
                    "usable_in"
                ]
            },
            "PrescrtiptionWriteRequest": {
                "type": "object",
                "properties": {
                    "issued_by": {
                        "type": "integer"
                    },
                    "issued_for": {
                        "type": "integer"
                    },
                    "drugs": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {}
                        }
                    },
                    "usable_in": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "date",
                            "example": "2022-12-06"
                        },
                        "example": {
                            "lower": "2022-12-03",
                            "upper": "2022-12-09",
                            "bounds": null
                        }
                    },
                    "issued_in": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Adipisci amet modi q",
                        "maxLength": 255
                    }
                },
                "required": [
                    "drugs",
                    "issued_by",
                    "issued_for",
                    "issued_in",
                    "usable_in"
                ]
            },
            "Specialization": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 67
                    },
                    "name": {
                        "type": "string",
                        "example": "Adipisci est ipsum est. Tem",
                        "maxLength": 255
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            }
        },
        "securitySchemes": {
            "tokenAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": "Token-based authentication with required prefix \"Token\""
            }
        }
    }
}
